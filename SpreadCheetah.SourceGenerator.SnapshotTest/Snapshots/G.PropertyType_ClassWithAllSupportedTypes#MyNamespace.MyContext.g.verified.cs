//HintName: MyNamespace.MyContext.g.cs
// <auto-generated />
#nullable enable
using SpreadCheetah;
using SpreadCheetah.SourceGeneration;
using SpreadCheetah.Styling;
using System;
using System.Buffers;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace MyNamespace
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("SpreadCheetah.SourceGenerator", "1.0.0")]
    public partial class MyContext
    {
        private static MyContext? _default;

        /// <summary>The default context instance.</summary>
        public static MyContext Default => _default ??= new MyContext();

        /// <inheritdoc/>
        public MyContext()
        {
        }

        private WorksheetRowTypeInfo<MyNamespace.ClassWithAllSupportedTypes>? _ClassWithAllSupportedTypes;

        /// <summary>
        /// Defines the source generated worksheet row metadata for a given type.
        /// </summary>
        public WorksheetRowTypeInfo<MyNamespace.ClassWithAllSupportedTypes> ClassWithAllSupportedTypes => _ClassWithAllSupportedTypes
            ??= WorksheetRowMetadataServices.CreateObjectInfo<MyNamespace.ClassWithAllSupportedTypes>(
                AddHeaderRow0Async, AddAsRowAsync, AddRangeAsRowsAsync, null, CreateWorksheetRowDependencyInfo0);

        private static WorksheetRowDependencyInfo CreateWorksheetRowDependencyInfo0(Spreadsheet spreadsheet)
        {
            var styleIds = new[]
            {
                spreadsheet.AddStyle(Style.Hyperlink),
            };
            return new WorksheetRowDependencyInfo(styleIds);
        }

        private static async ValueTask AddHeaderRow0Async(SpreadCheetah.Spreadsheet spreadsheet, SpreadCheetah.Styling.StyleId? styleId, CancellationToken token)
        {
            var headerNames = ArrayPool<string?>.Shared.Rent(20);
            try
            {
                headerNames[0] = "StringValue";
                headerNames[1] = "NullableStringValue";
                headerNames[2] = "IntValue";
                headerNames[3] = "NullableIntValue";
                headerNames[4] = "LongValue";
                headerNames[5] = "NullableLongValue";
                headerNames[6] = "FloatValue";
                headerNames[7] = "NullableFloatValue";
                headerNames[8] = "DoubleValue";
                headerNames[9] = "NullableDoubleValue";
                headerNames[10] = "DecimalValue";
                headerNames[11] = "NullableDecimalValue";
                headerNames[12] = "DateTimeValue";
                headerNames[13] = "NullableDateTimeValue";
                headerNames[14] = "BoolValue";
                headerNames[15] = "NullableBoolValue";
                headerNames[16] = "FormulaValue";
                headerNames[17] = "NullableFormulaValue";
                headerNames[18] = "UriValue";
                headerNames[19] = "NullableUriValue";
                await spreadsheet.AddHeaderRowAsync(headerNames.AsMemory(0, 20)!, styleId, token).ConfigureAwait(false);
            }
            finally
            {
                ArrayPool<string?>.Shared.Return(headerNames, true);
            }
        }

        private static ValueTask AddAsRowAsync(SpreadCheetah.Spreadsheet spreadsheet, MyNamespace.ClassWithAllSupportedTypes? obj, CancellationToken token)
        {
            if (spreadsheet is null)
                throw new ArgumentNullException(nameof(spreadsheet));
            if (obj is null)
                return spreadsheet.AddRowAsync(ReadOnlyMemory<Cell>.Empty, token);
            return AddAsRowInternalAsync(spreadsheet, obj, token);
        }

        private static ValueTask AddRangeAsRowsAsync(SpreadCheetah.Spreadsheet spreadsheet,
            IEnumerable<MyNamespace.ClassWithAllSupportedTypes?> objs,
            CancellationToken token)
        {
            if (spreadsheet is null)
                throw new ArgumentNullException(nameof(spreadsheet));
            if (objs is null)
                throw new ArgumentNullException(nameof(objs));
            return AddRangeAsRowsInternalAsync(spreadsheet, objs, token);
        }

        private static async ValueTask AddAsRowInternalAsync(SpreadCheetah.Spreadsheet spreadsheet,
            MyNamespace.ClassWithAllSupportedTypes obj,
            CancellationToken token)
        {
            var cells = ArrayPool<Cell>.Shared.Rent(20);
            try
            {
                var worksheetRowDependencyInfo = spreadsheet.GetOrCreateWorksheetRowDependencyInfo(Default.ClassWithAllSupportedTypes);
                var styleIds = worksheetRowDependencyInfo.StyleIds;
                await AddCellsAsRowAsync(spreadsheet, obj, cells, styleIds, token).ConfigureAwait(false);
            }
            finally
            {
                ArrayPool<Cell>.Shared.Return(cells, true);
            }
        }

        private static async ValueTask AddRangeAsRowsInternalAsync(SpreadCheetah.Spreadsheet spreadsheet,
            IEnumerable<MyNamespace.ClassWithAllSupportedTypes?> objs,
            CancellationToken token)
        {
            var cells = ArrayPool<Cell>.Shared.Rent(20);
            try
            {
                var worksheetRowDependencyInfo = spreadsheet.GetOrCreateWorksheetRowDependencyInfo(Default.ClassWithAllSupportedTypes);
                var styleIds = worksheetRowDependencyInfo.StyleIds;
                foreach (var obj in objs)
                {
                    await AddCellsAsRowAsync(spreadsheet, obj, cells, styleIds, token).ConfigureAwait(false);
                }
            }
            finally
            {
                ArrayPool<Cell>.Shared.Return(cells, true);
            }
        }

        private static ValueTask AddCellsAsRowAsync(SpreadCheetah.Spreadsheet spreadsheet,
            MyNamespace.ClassWithAllSupportedTypes? obj,
            Cell[] cells, IReadOnlyList<StyleId> styleIds, CancellationToken token)
        {
            if (obj is null)
                return spreadsheet.AddRowAsync(ReadOnlyMemory<Cell>.Empty, token);

            cells[0] = new Cell(new DataCell(obj.StringValue));
            cells[1] = new Cell(new DataCell(obj.NullableStringValue));
            cells[2] = new Cell(new DataCell(obj.IntValue));
            cells[3] = new Cell(new DataCell(obj.NullableIntValue));
            cells[4] = new Cell(new DataCell(obj.LongValue));
            cells[5] = new Cell(new DataCell(obj.NullableLongValue));
            cells[6] = new Cell(new DataCell(obj.FloatValue));
            cells[7] = new Cell(new DataCell(obj.NullableFloatValue));
            cells[8] = new Cell(new DataCell(obj.DoubleValue));
            cells[9] = new Cell(new DataCell(obj.NullableDoubleValue));
            cells[10] = new Cell(new DataCell(obj.DecimalValue));
            cells[11] = new Cell(new DataCell(obj.NullableDecimalValue));
            cells[12] = new Cell(new DataCell(obj.DateTimeValue));
            cells[13] = new Cell(new DataCell(obj.NullableDateTimeValue));
            cells[14] = new Cell(new DataCell(obj.BoolValue));
            cells[15] = new Cell(new DataCell(obj.NullableBoolValue));
            cells[16] = new Cell(obj.FormulaValue);
            cells[17] = ConstructNullableFormulaCell(obj.NullableFormulaValue);
            cells[18] = ConstructHyperlinkFormulaCellFromUri(obj.UriValue, styleIds[0]);
            cells[19] = ConstructHyperlinkFormulaCellFromUri(obj.NullableUriValue, styleIds[0]);
            return spreadsheet.AddRowAsync(cells.AsMemory(0, 20), token);
        }

        private static Cell ConstructNullableFormulaCell(Formula? formula, StyleId? styleId = null)
        {
            return formula is { } f
                ? new Cell(f, styleId)
                : new Cell(new DataCell(), styleId);
        }

        private static Cell ConstructHyperlinkFormulaCellFromUri(Uri? uri, StyleId styleId)
        {
            return uri is not null
                ? new Cell(Formula.Hyperlink(uri), styleId)
                : new Cell(new DataCell(), null);
        }
    }
}
