//HintName: MyNamespace.MyGenRowContext.g.cs
// <auto-generated />
#nullable enable
using SpreadCheetah;
using SpreadCheetah.SourceGeneration;
using SpreadCheetah.Styling;
using System;
using System.Buffers;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace MyNamespace
{
    public partial class MyGenRowContext
    {
        private static MyGenRowContext? _default;
        public static MyGenRowContext Default => _default ??= new MyGenRowContext();

        public MyGenRowContext()
        {
        }

        private WorksheetRowTypeInfo<MyNamespace.ClassWithCellFormat>? _ClassWithCellFormat;
        public WorksheetRowTypeInfo<MyNamespace.ClassWithCellFormat> ClassWithCellFormat => _ClassWithCellFormat
            ??= WorksheetRowMetadataServices.CreateObjectInfo<MyNamespace.ClassWithCellFormat>(
                AddHeaderRow0Async, AddAsRowAsync, AddRangeAsRowsAsync, null, CreateWorksheetRowDependencyInfo0);

        private static WorksheetRowDependencyInfo CreateWorksheetRowDependencyInfo0(Spreadsheet spreadsheet)
        {
            var styleIds = new[]
            {
                spreadsheet.AddStyle(new Style { Format = NumberFormat.Custom("#.0#") }),
                spreadsheet.AddStyle(new Style { Format = NumberFormat.Standard(StandardNumberFormat.Exponential) }),
            };
            return new WorksheetRowDependencyInfo(styleIds);
        }

        private static async ValueTask AddHeaderRow0Async(SpreadCheetah.Spreadsheet spreadsheet, SpreadCheetah.Styling.StyleId? styleId, CancellationToken token)
        {
            var headerNames = ArrayPool<string?>.Shared.Rent(4);
            try
            {
                headerNames[0] = "First";
                headerNames[1] = "Second";
                headerNames[2] = "Year";
                headerNames[3] = "Score";
                await spreadsheet.AddHeaderRowAsync(headerNames.AsMemory(0, 4)!, styleId, token).ConfigureAwait(false);
            }
            finally
            {
                ArrayPool<string?>.Shared.Return(headerNames, true);
            }
        }

        private static ValueTask AddAsRowAsync(SpreadCheetah.Spreadsheet spreadsheet, MyNamespace.ClassWithCellFormat? obj, CancellationToken token)
        {
            if (spreadsheet is null)
                throw new ArgumentNullException(nameof(spreadsheet));
            if (obj is null)
                return spreadsheet.AddRowAsync(ReadOnlyMemory<StyledCell>.Empty, token);
            return AddAsRowInternalAsync(spreadsheet, obj, token);
        }

        private static ValueTask AddRangeAsRowsAsync(SpreadCheetah.Spreadsheet spreadsheet,
            IEnumerable<MyNamespace.ClassWithCellFormat?> objs,
            CancellationToken token)
        {
            if (spreadsheet is null)
                throw new ArgumentNullException(nameof(spreadsheet));
            if (objs is null)
                throw new ArgumentNullException(nameof(objs));
            return AddRangeAsRowsInternalAsync(spreadsheet, objs, token);
        }

        private static async ValueTask AddAsRowInternalAsync(SpreadCheetah.Spreadsheet spreadsheet,
            MyNamespace.ClassWithCellFormat obj,
            CancellationToken token)
        {
            var cells = ArrayPool<StyledCell>.Shared.Rent(4);
            try
            {
                var worksheetRowDependencyInfo = spreadsheet.GetOrCreateWorksheetRowDependencyInfo(Default.ClassWithCellFormat);
                var styleIds = worksheetRowDependencyInfo.StyleIds;
                await AddCellsAsRowAsync(spreadsheet, obj, cells, styleIds, token).ConfigureAwait(false);
            }
            finally
            {
                ArrayPool<StyledCell>.Shared.Return(cells, true);
            }
        }

        private static async ValueTask AddRangeAsRowsInternalAsync(SpreadCheetah.Spreadsheet spreadsheet,
            IEnumerable<MyNamespace.ClassWithCellFormat?> objs,
            CancellationToken token)
        {
            var cells = ArrayPool<StyledCell>.Shared.Rent(4);
            try
            {
                var worksheetRowDependencyInfo = spreadsheet.GetOrCreateWorksheetRowDependencyInfo(Default.ClassWithCellFormat);
                var styleIds = worksheetRowDependencyInfo.StyleIds;
                foreach (var obj in objs)
                {
                    await AddCellsAsRowAsync(spreadsheet, obj, cells, styleIds, token).ConfigureAwait(false);
                }
            }
            finally
            {
                ArrayPool<StyledCell>.Shared.Return(cells, true);
            }
        }

        private static ValueTask AddCellsAsRowAsync(SpreadCheetah.Spreadsheet spreadsheet,
            MyNamespace.ClassWithCellFormat? obj,
            StyledCell[] cells, IReadOnlyList<StyleId> styleIds, CancellationToken token)
        {
            if (obj is null)
                return spreadsheet.AddRowAsync(ReadOnlyMemory<StyledCell>.Empty, token);

            cells[0] = new StyledCell(new DataCell(obj.First), styleIds[0]);
            cells[1] = new StyledCell(new DataCell(obj.Second), styleIds[1]);
            cells[2] = new StyledCell(new DataCell(obj.Year), null);
            cells[3] = new StyledCell(new DataCell(obj.Score), styleIds[0]);
            return spreadsheet.AddRowAsync(cells.AsMemory(0, 4), token);
        }

        private static DataCell ConstructTruncatedDataCell(string? value, int truncateLength)
        {
            return value is null || value.Length <= truncateLength
                ? new DataCell(value)
                : new DataCell(value.AsMemory(0, truncateLength));
        }
    }
}
